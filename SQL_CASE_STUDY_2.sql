/* ---------------------------------------- 'SQL CASE STUDY ADVANCED' -------------------------------------- */
/*-------------------------------------"shubhamjainxyz@gmail.com - BA360 AUG'20 BATCH"---------------------------------------- */
/* ---------------------------------------- 'MOBILE MANUFACTURER ANALYSIS' -------------------------- */

-- Q1. List all the states in which we have customers who have bought cellphones
--     from 2005 till today.

SELECT T1.STATE
FROM DIM_LOCATION AS T1 
     INNER JOIN FACT_TRANSACTIONS AS T2 ON T1.IDLOCATION = T2.IDLOCATION
WHERE DATENAME(YEAR, T2.DATE) BETWEEN 2005 AND DATENAME(YEAR, GETDATE())
GROUP BY T1.STATE

-- Q2. What state in the US is buying more 'Samsung' cell phones?

SELECT TOP 1 T1.STATE, SUM(T2.QUANTITY) AS NO_OF_SAMSUNG_PHONES
FROM DIM_LOCATION AS T1 INNER JOIN
     FACT_TRANSACTIONS AS T2 ON T1.IDLOCATION = T2.IDLOCATION 
WHERE T1.COUNTRY LIKE 'US' AND T2.IDMODEL IN (
                                              SELECT T4.IDMODEL
					                          FROM DIM_MANUFACTURER AS T3 INNER JOIN
					                               DIM_MODEL AS T4 ON T3.IDMANUFACTURER = T4.IDMANUFACTURER
					                          WHERE T3.MANUFACTURER_NAME LIKE 'SAMSUNG'
                                             )
GROUP BY T1.STATE
ORDER BY SUM(T2.QUANTITY) DESC;

-- Q3. Show the number of transactions for each model per zip code per state.

SELECT T1.IDMODEL, ZIPCODE, T3.STATE, MODEL_NAME, COUNT(T2.IDMODEL) AS NO_OF_TRANSACTIONS
FROM DIM_MODEL AS T1 INNER JOIN FACT_TRANSACTIONS AS T2 ON T1.IDMODEL = T2.IDMODEL 
                     INNER JOIN DIM_LOCATION AS T3 ON T2.IDLOCATION = T3.IDLOCATION 
GROUP BY T1.IDMODEL, MODEL_NAME, ZIPCODE, T3.STATE

-- Q4. Show the cheapest cellphone ?

SELECT TOP 1 *
FROM DIM_MODEL AS T1 INNER JOIN DIM_MANUFACTURER AS T2 
     ON T1.IDMANUFACTURER = T2.IDMANUFACTURER
ORDER BY UNIT_PRICE;

-- Q5. Find out the average price for each model in the top 5 manufacturers in
--     terms of sales quantity and order by average price.

SELECT T1.IDMANUFACTURER, AVG(UNIT_PRICE) AS AVERAGE_PRICE_PER_MODEL
FROM DIM_MANUFACTURER AS T1 INNER JOIN DIM_MODEL AS T2 ON T1.IDMANUFACTURER = T2.IDMANUFACTURER
WHERE T1.IDMANUFACTURER IN (
                        SELECT TOP 5 T4.IDMANUFACTURER
						FROM FACT_TRANSACTIONS AS T3 INNER JOIN DIM_MODEL AS T4 ON T3.IDMODEL = T4.IDMODEL 
						GROUP BY T4.IDMANUFACTURER 
						ORDER BY SUM(CAST(T3.QUANTITY AS FLOAT)) DESC
                       ) 
GROUP BY T1.IDMANUFACTURER
ORDER BY AVG(UNIT_PRICE)

-- Q6. List the names of the customers and the average amount spent in 2009,
--     where the average is higher than 500.

SELECT CUSTOMER_NAME, AVG(TOTALPRICE) AS AVERAGE_AMOUNT_SPENT
FROM DIM_CUSTOMER AS T1 INNER JOIN FACT_TRANSACTIONS AS T2
     ON T1.IDCUSTOMER = T2.IDCUSTOMER
WHERE DATEPART(YEAR, T2.DATE) = 2009
GROUP BY CUSTOMER_NAME
HAVING AVG(TOTALPRICE) > 500

-- Q7. List if there is any model that was in the top 5 in terms of quantity,
--     simultaneously in 2008, 2009 and 2010.

SELECT TOP 5 T1.IDMODEL, SUM(QUANTITY) AS SALES_QUANTITY
FROM DIM_MODEL AS T1 INNER JOIN FACT_TRANSACTIONS AS T2 ON T1.IDMODEL = T2.IDMODEL 
WHERE DATEPART(YEAR, T2.DATE) = 2010 AND T1.IDMODEL IN(
                                                       SELECT TOP 5 T1.IDMODEL
                                                       FROM DIM_MODEL AS T1 INNER JOIN FACT_TRANSACTIONS AS T2 ON T1.IDMODEL = T2.IDMODEL 
                                                       WHERE DATEPART(YEAR, T2.DATE) = 2009 AND T1.IDMODEL IN(
													                                                          SELECT TOP 5 T1.IDMODEL
                                                                                                              FROM DIM_MODEL AS T1 INNER JOIN FACT_TRANSACTIONS AS T2 ON T1.IDMODEL = T2.IDMODEL 
                                                                                                              WHERE DATEPART(YEAR, T2.DATE) = 2008
                                                                                                              GROUP BY T1.IDMODEL
                                                                                                              ORDER BY SUM(QUANTITY) DESC
                                                                                                              )
                                                       GROUP BY T1.IDMODEL
                                                       ORDER BY SUM(QUANTITY) DESC
													  )
GROUP BY T1.IDMODEL
ORDER BY SUM(QUANTITY) DESC

-- Q8. Show the manufacturer with the 2nd top sales in the year of 2009 and the
--     manufacturer with the 2nd top sales in the year of 2010.

-- QUERY ASSUMING SALES BY QUANTITY
SELECT *
FROM(
		SELECT ROW_NUMBER() OVER (ORDER BY SUM(T1.QUANTITY) DESC) AS SALES_RANK, 
			   T2.IDMANUFACTURER, T3.MANUFACTURER_NAME, SUM(T1.QUANTITY) AS SALES_QUANTITY
		FROM FACT_TRANSACTIONS AS T1 
			 INNER JOIN DIM_MODEL AS T2 ON T1.IDMODEL = T2.IDMODEL 
			 INNER JOIN DIM_MANUFACTURER AS T3 ON T2.IDMANUFACTURER = T3.IDMANUFACTURER
		GROUP BY T2.IDMANUFACTURER, T3.MANUFACTURER_NAME, DATEPART(YEAR, T1.DATE)
		HAVING DATEPART(YEAR, T1.DATE) = 2009
		UNION ALL 
		SELECT ROW_NUMBER() OVER (ORDER BY SUM(T1.QUANTITY) DESC) AS SALES_RANK, 
			   T2.IDMANUFACTURER, T3.MANUFACTURER_NAME, SUM(T1.QUANTITY) AS SALES_QUANTITY
		FROM FACT_TRANSACTIONS AS T1 
			INNER JOIN DIM_MODEL AS T2 ON T1.IDMODEL = T2.IDMODEL 
			INNER JOIN DIM_MANUFACTURER AS T3 ON T2.IDMANUFACTURER = T3.IDMANUFACTURER
		GROUP BY T2.IDMANUFACTURER, T3.MANUFACTURER_NAME, DATEPART(YEAR, T1.DATE)
		HAVING DATEPART(YEAR, T1.DATE) = 2010
    ) AS TT
WHERE SALES_RANK = 2 

-- QUERY ASSUMING SALES BY AMOUNT
SELECT *
FROM(
		SELECT ROW_NUMBER() OVER (ORDER BY SUM(T1.TOTALPRICE) DESC) AS SALES_RANK, 
			   T2.IDMANUFACTURER, T3.MANUFACTURER_NAME, SUM(T1.TOTALPRICE) AS SALES_AMOUNT
		FROM FACT_TRANSACTIONS AS T1 
			 INNER JOIN DIM_MODEL AS T2 ON T1.IDMODEL = T2.IDMODEL 
			 INNER JOIN DIM_MANUFACTURER AS T3 ON T2.IDMANUFACTURER = T3.IDMANUFACTURER
		GROUP BY T2.IDMANUFACTURER, T3.MANUFACTURER_NAME, DATEPART(YEAR, T1.DATE)
		HAVING DATEPART(YEAR, T1.DATE) = 2009
		UNION ALL 
		SELECT ROW_NUMBER() OVER (ORDER BY SUM(T1.TOTALPRICE) DESC) AS SALES_RANK, 
			   T2.IDMANUFACTURER, T3.MANUFACTURER_NAME, SUM(T1.TOTALPRICE) AS SALES_AMOUNT
		FROM FACT_TRANSACTIONS AS T1 
			INNER JOIN DIM_MODEL AS T2 ON T1.IDMODEL = T2.IDMODEL 
			INNER JOIN DIM_MANUFACTURER AS T3 ON T2.IDMANUFACTURER = T3.IDMANUFACTURER
		GROUP BY T2.IDMANUFACTURER, T3.MANUFACTURER_NAME, DATEPART(YEAR, T1.DATE)
		HAVING DATEPART(YEAR, T1.DATE) = 2010
    ) AS TT
WHERE SALES_RANK = 2 

-- Q9. Show the manufacturers that sold cellphone in 2010 but didn’t in 2009.

SELECT T2.IDMANUFACTURER, T3.MANUFACTURER_NAME
FROM FACT_TRANSACTIONS AS T1 
     INNER JOIN DIM_MODEL AS T2 ON T1.IDMODEL = T2.IDMODEL 
	 INNER JOIN DIM_MANUFACTURER AS T3 ON T2.IDMANUFACTURER = T3.IDMANUFACTURER
WHERE DATEPART(YEAR, T1.DATE) = 2010 
      AND T2.IDMANUFACTURER NOT IN (
                                     SELECT T2.IDMANUFACTURER
                                     FROM FACT_TRANSACTIONS AS T1 
									 INNER JOIN DIM_MODEL AS T2 ON T1.IDMODEL = T2.IDMODEL 
	                                 INNER JOIN DIM_MANUFACTURER AS T3 ON T2.IDMANUFACTURER = T3.IDMANUFACTURER
                                     WHERE DATEPART(YEAR, T1.DATE) = 2009
									 GROUP BY T2.IDMANUFACTURER, T3.MANUFACTURER_NAME
									)
GROUP BY T2.IDMANUFACTURER, T3.MANUFACTURER_NAME 

-- Q10. Find top 100 customers and their average spend, average quantity by each
--      year. Also find the percentage of change in their spend.

/* HERE IN THIS QUERY AVERAGE_PRICE_SPENT, AVERAGE_QUANTITY MEANS AVERAGE_PRICE_SPENT PER TRANSACTION AND AVERAGE_QUANTITY PER
   TRANSACTION, HENCE %_CHANGE MEANS INCREASE OR DECREASE IN AVERAGE_PRICE_SPENT PER TRANSACTION */

SELECT IDCUSTOMER, TT.CUSTOMER_NAME,
       SUM(AVERAGE_PRICE_SPENT_2003) AS AVERAGE_PRICE_SPENT_2003, 
       SUM(AVERAGE_QUANTITY_2003) AS AVERAGE_QUANTITY_2003,
	   SUM(AVERAGE_PRICE_SPENT_2004) AS AVERAGE_PRICE_SPENT_2004, 
       SUM(AVERAGE_QUANTITY_2004) AS AVERAGE_QUANTITY_2004,
	 ((SUM(AVERAGE_PRICE_SPENT_2004) - SUM(AVERAGE_PRICE_SPENT_2003))*100)/SUM(AVERAGE_PRICE_SPENT_2003) AS [%_CHANGE_IN_2004],
	   SUM(AVERAGE_PRICE_SPENT_2005) AS AVERAGE_PRICE_SPENT_2005, 
       SUM(AVERAGE_QUANTITY_2005) AS AVERAGE_QUANTITY_2005,
	 ((SUM(AVERAGE_PRICE_SPENT_2005) - SUM(AVERAGE_PRICE_SPENT_2004))*100)/SUM(AVERAGE_PRICE_SPENT_2004) AS [%_CHANGE_IN_2005],
	   SUM(AVERAGE_PRICE_SPENT_2006) AS AVERAGE_PRICE_SPENT_2006, 
       SUM(AVERAGE_QUANTITY_2006) AS AVERAGE_QUANTITY_2006,
     ((SUM(AVERAGE_PRICE_SPENT_2006) - SUM(AVERAGE_PRICE_SPENT_2005))*100)/SUM(AVERAGE_PRICE_SPENT_2005) AS [%_CHANGE_IN_2006],
	   SUM(AVERAGE_PRICE_SPENT_2007) AS AVERAGE_PRICE_SPENT_2007, 
       SUM(AVERAGE_QUANTITY_2007) AS AVERAGE_QUANTITY_2007,
	 ((SUM(AVERAGE_PRICE_SPENT_2007) - SUM(AVERAGE_PRICE_SPENT_2006))*100)/SUM(AVERAGE_PRICE_SPENT_2006) AS [%_CHANGE_IN_2007],
	   SUM(AVERAGE_PRICE_SPENT_2008) AS AVERAGE_PRICE_SPENT_2008, 
       SUM(AVERAGE_QUANTITY_2008) AS AVERAGE_QUANTITY_2008,
	 ((SUM(AVERAGE_PRICE_SPENT_2008) - SUM(AVERAGE_PRICE_SPENT_2007))*100)/SUM(AVERAGE_PRICE_SPENT_2007) AS [%_CHANGE_IN_2008],
	   SUM(AVERAGE_PRICE_SPENT_2009) AS AVERAGE_PRICE_SPENT_2009, 
       SUM(AVERAGE_QUANTITY_2009) AS AVERAGE_QUANTITY_2009,
	 ((SUM(AVERAGE_PRICE_SPENT_2009) - SUM(AVERAGE_PRICE_SPENT_2008))*100)/SUM(AVERAGE_PRICE_SPENT_2008) AS [%_CHANGE_IN_2009],
	   SUM(AVERAGE_PRICE_SPENT_2010) AS AVERAGE_PRICE_SPENT_2010, 
       SUM(AVERAGE_QUANTITY_2010) AS AVERAGE_QUANTITY_2010,
     ((SUM(AVERAGE_PRICE_SPENT_2010) - SUM(AVERAGE_PRICE_SPENT_2009))*100)/SUM(AVERAGE_PRICE_SPENT_2009) AS [%_CHANGE_IN_2010]
FROM
(
SELECT  T1.IDCUSTOMER, T1.CUSTOMER_NAME,
	   CASE WHEN DATEPART(YEAR, T2.DATE) = 2003 THEN AVG(TOTALPRICE) END AS AVERAGE_PRICE_SPENT_2003,
	   CASE WHEN DATEPART(YEAR, T2.DATE) = 2003 THEN AVG(CAST(QUANTITY AS FLOAT)) END AS AVERAGE_QUANTITY_2003,
	   CASE WHEN DATEPART(YEAR, T2.DATE) = 2004 THEN AVG(TOTALPRICE) END AS AVERAGE_PRICE_SPENT_2004,
	   CASE WHEN DATEPART(YEAR, T2.DATE) = 2004 THEN AVG(CAST(QUANTITY AS FLOAT)) END AS AVERAGE_QUANTITY_2004,
	   CASE WHEN DATEPART(YEAR, T2.DATE) = 2005 THEN AVG(TOTALPRICE) END AS AVERAGE_PRICE_SPENT_2005,
	   CASE WHEN DATEPART(YEAR, T2.DATE) = 2005 THEN AVG(CAST(QUANTITY AS FLOAT)) END AS AVERAGE_QUANTITY_2005,
	   CASE WHEN DATEPART(YEAR, T2.DATE) = 2006 THEN AVG(TOTALPRICE) END AS AVERAGE_PRICE_SPENT_2006,
	   CASE WHEN DATEPART(YEAR, T2.DATE) = 2006 THEN AVG(CAST(QUANTITY AS FLOAT)) END AS AVERAGE_QUANTITY_2006,
	   CASE WHEN DATEPART(YEAR, T2.DATE) = 2007 THEN AVG(TOTALPRICE) END AS AVERAGE_PRICE_SPENT_2007,
	   CASE WHEN DATEPART(YEAR, T2.DATE) = 2007 THEN AVG(CAST(QUANTITY AS FLOAT)) END AS AVERAGE_QUANTITY_2007,
	   CASE WHEN DATEPART(YEAR, T2.DATE) = 2008 THEN AVG(TOTALPRICE) END AS AVERAGE_PRICE_SPENT_2008,
	   CASE WHEN DATEPART(YEAR, T2.DATE) = 2008 THEN AVG(CAST(QUANTITY AS FLOAT)) END AS AVERAGE_QUANTITY_2008,
	   CASE WHEN DATEPART(YEAR, T2.DATE) = 2009 THEN AVG(TOTALPRICE) END AS AVERAGE_PRICE_SPENT_2009,
	   CASE WHEN DATEPART(YEAR, T2.DATE) = 2009 THEN AVG(CAST(QUANTITY AS FLOAT)) END AS AVERAGE_QUANTITY_2009,
	   CASE WHEN DATEPART(YEAR, T2.DATE) = 2010 THEN AVG(TOTALPRICE) END AS AVERAGE_PRICE_SPENT_2010,
	   CASE WHEN DATEPART(YEAR, T2.DATE) = 2010 THEN AVG(CAST(QUANTITY AS FLOAT)) END AS AVERAGE_QUANTITY_2010
FROM DIM_CUSTOMER AS T1 INNER JOIN FACT_TRANSACTIONS AS T2
     ON T1.IDCUSTOMER = T2.IDCUSTOMER
WHERE T1.IDCUSTOMER IN ( SELECT TOP 10 IDCUSTOMER FROM FACT_TRANSACTIONS GROUP BY IDCUSTOMER ORDER BY SUM(TOTALPRICE) DESC)
GROUP BY T1.IDCUSTOMER, T1.CUSTOMER_NAME, DATEPART(YEAR, T2.DATE)
) AS TT
GROUP BY TT.IDCUSTOMER, TT.CUSTOMER_NAME
